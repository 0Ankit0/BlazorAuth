@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized Context="auth">
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link text-dark" href="/Identity/Account/Manage/Index" title="Manage">Hello @userName!</a>
            </li>
            <li class="nav-item">
                <button class="nav-link btn btn-link text-dark border-0" @onclick="Logout">Logout</button>
            </li>
        </ul>
    </Authorized>
    <NotAuthorized>
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link text-dark" href="/Identity/Account/Register">Register</a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-dark" href="/Identity/Account/Login">Login</a>
            </li>
        </ul>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var authState = await authenticationStateTask;
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                userName = await UserManager.GetUserNameAsync(user) ?? string.Empty;
            }
        }
    }
    private async Task Logout()
    {
        await SignInManager.SignOutAsync();
        NavigationManager.NavigateTo("/");
    }
}
