@page "/account/disable2fa"
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager
@inject ILogger<Disable2fa> Logger
@using Microsoft.AspNetCore.Components.Authorization

<h1>Disable two-factor authentication (2FA)</h1>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

<div class="alert alert-warning" role="alert">
    <p>
        <strong>This action only disables 2FA.</strong>
    </p>
    <p>
        Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a href="/account/resetauthenticator">reset your authenticator keys.</a>
    </p>
</div>

@if (canDisable2fa)
{
    <EditForm OnValidSubmit="Disable2faHandler">
        <button class="btn btn-danger" type="submit">Disable 2FA</button>
    </EditForm>
}
else if (checked2fa)
{
    <div class="alert alert-info mt-2">2FA is not currently enabled for your account.</div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private string? statusMessage;
    private bool canDisable2fa = false;
    private bool checked2fa = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            statusMessage = "Invalid state.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "Unable to load user.";
            return;
        }

        canDisable2fa = await UserManager.GetTwoFactorEnabledAsync(user);
        checked2fa = true;
        if (!canDisable2fa)
        {
            statusMessage = "2FA is not currently enabled for your account.";
        }
    }

    private async Task Disable2faHandler()
    {
        statusMessage = string.Empty;

        if (authenticationStateTask == null)
        {
            statusMessage = "Invalid state.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "Unable to load user.";
            return;
        }

        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            statusMessage = "Unexpected error occurred disabling 2FA.";
            return;
        }

        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", await UserManager.GetUserIdAsync(user));
        statusMessage = "2FA has been disabled. You can reenable 2FA when you setup an authenticator app.";
        // Redirect to the two-factor authentication management page
        NavigationManager.NavigateTo("/account/twofactorauthentication", true);
    }
}
