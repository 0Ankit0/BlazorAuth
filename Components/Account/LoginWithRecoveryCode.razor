@page "/account/loginwithrecoverycode"
@using System.ComponentModel.DataAnnotations
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject ILogger<LoginWithRecoveryCode> Logger
@inject NavigationManager NavigationManager

<h1>Recovery code verification</h1>
<hr />
<p>
    You have requested to log in with a recovery code. This login will not be remembered until you provide
    an authenticator app code at log in or disable 2FA and log in again.
</p>
<EditForm Model="recoveryModel" OnValidSubmit="HandleRecoveryLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-3">
        <InputText @bind-Value="recoveryModel.RecoveryCode" class="form-control" autocomplete="off" placeholder="Recovery code" />
        <label class="form-label">Recovery code</label>
        <ValidationMessage For="@(() => recoveryModel.RecoveryCode)" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
</EditForm>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

@code {
    private RecoveryModel recoveryModel = new();
    private string? statusMessage;
    private string? returnUrl;

    protected override async Task OnInitializedAsync()
    {
        // Parse returnUrl from query string if present
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("returnUrl", out var returnUrlValue))
        {
            returnUrl = returnUrlValue;
        }

        // Ensure the user has gone through the username & password screen first
        var user = await SignInManager.GetTwoFactorAuthenticationUserAsync();
        if (user == null)
        {
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
        }
    }

    private async Task HandleRecoveryLogin()
    {
        statusMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(recoveryModel.RecoveryCode))
        {
            statusMessage = "Recovery code is required.";
            return;
        }

        // Remove spaces from the recovery code
        var recoveryCode = recoveryModel.RecoveryCode.Replace(" ", string.Empty);

        var user = await SignInManager.GetTwoFactorAuthenticationUserAsync();
        if (user == null)
        {
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
        }

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            NavigationManager.NavigateTo(returnUrl ?? "/");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            NavigationManager.NavigateTo("/account/lockout");
        }
        else
        {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            statusMessage = "Invalid recovery code entered.";
        }
    }

    public class RecoveryModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string? RecoveryCode { get; set; }
    }
}
