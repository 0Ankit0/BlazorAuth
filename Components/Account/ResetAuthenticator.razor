@page "/account/resetauthenticator"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject ILogger<ResetAuthenticator> Logger
@inject NavigationManager NavigationManager

<h3>Reset authenticator key</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

<div class="alert alert-warning" role="alert">
    <p>
        <strong>If you reset your authenticator key your authenticator app will not work until you reconfigure it.</strong>
    </p>
    <p>
        This process disables 2FA until you verify your authenticator app.
        If you do not complete your authenticator app configuration you may lose access to your account.
    </p>
</div>
<div>
    <button class="btn btn-danger" @onclick="ResetAuthenticatorAsync" disabled="@isProcessing">
        Reset authenticator key
    </button>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private string? statusMessage;
    private bool isProcessing = false;

    private async Task ResetAuthenticatorAsync()
    {
        isProcessing = true;
        statusMessage = null;

        if (authenticationStateTask == null)
        {
            statusMessage = "Unable to load authentication state.";
            isProcessing = false;
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            isProcessing = false;
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        // Optionally, you can show a message here before redirecting
        statusMessage = "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.";

        // Redirect to the enable authenticator page after a short delay
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/account/enableauthenticator", forceLoad: true);

        isProcessing = false;
    }
}