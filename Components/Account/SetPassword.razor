@page "/account/setpassword"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization

<h1>Set Password</h1>
<EditForm Model="setPasswordModel" OnValidSubmit="HandleSetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="setPasswordModel.NewPassword" class="form-control" type="password" placeholder="New password" />
    <InputText @bind-Value="setPasswordModel.ConfirmPassword" class="form-control" type="password" placeholder="Confirm new password" />
    <button type="submit" class="w-100 btn btn-lg btn-primary">Set Password</button>
</EditForm>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private SetPasswordModel setPasswordModel = new SetPasswordModel();
    private string? statusMessage;

    private async Task HandleSetPassword()
    {
        statusMessage = string.Empty;
        if (setPasswordModel.NewPassword != setPasswordModel.ConfirmPassword)
        {
            statusMessage = "Passwords do not match.";
            return;
        }
        if (authenticationStateTask == null || string.IsNullOrEmpty(setPasswordModel.NewPassword))
        {
            statusMessage = "Invalid state or password.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }
        var result = await UserManager.AddPasswordAsync(user, setPasswordModel.NewPassword);
        if (result.Succeeded)
        {
            statusMessage = "Password set successfully.";
        }
        else
        {
            statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }
    public class SetPasswordModel
    {
        [Required]
        [MinLength(6)]
        public string? NewPassword { get; set; }
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
