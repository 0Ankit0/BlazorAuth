@page "/account/showrecoverycodes"
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager

<h3>Recovery codes</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Put these codes in a safe place.</strong>
    </p>
    <p>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
</div>

@if (recoveryCodes == null || recoveryCodes.Length == 0)
{
    <div class="alert alert-danger">No recovery codes to display. Redirecting...</div>
}
else
{
    <div class="row">
        <div class="col-md-12">
            @for (var row = 0; row < recoveryCodes.Length; row += 2)
            {
                <code class="recovery-code">@recoveryCodes[row]</code>
                @if (row + 1 < recoveryCodes.Length)
                {
                    <text>&nbsp;</text><code class="recovery-code">@recoveryCodes[row + 1]</code>
                }
                <br />
            }
        </div>
    </div>
}

@code {
    [Parameter] public string[]? RecoveryCodes { get; set; }
    [Parameter] public string? StatusMessage { get; set; }

    private string[]? recoveryCodes;
    private string? statusMessage;

    protected override void OnInitialized()
    {
        // Try to get recovery codes from navigation state if not provided as parameter
        if (RecoveryCodes != null && RecoveryCodes.Length > 0)
        {
            recoveryCodes = RecoveryCodes;
        }
        else
        {
            // Parse query string manually
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (query.TryGetValue("codes", out var codesCsv) && !string.IsNullOrWhiteSpace(codesCsv))
            {
                recoveryCodes = codesCsv.ToString().Split(',', StringSplitOptions.RemoveEmptyEntries);
            }
            else
            {
                recoveryCodes = Array.Empty<string>();
            }
        }

        statusMessage = StatusMessage;

        // If no codes, redirect after render
        if (recoveryCodes.Length == 0)
        {
            // Delay to show the message before redirect
            _ = Task.Run(async () =>
            {
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/account/twofactorauthentication", forceLoad: true);
            });
        }
    }
}