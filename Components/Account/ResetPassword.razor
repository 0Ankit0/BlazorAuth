@page "/account/resetpassword"
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<h1>Reset password</h1>
<h2>Reset your password.</h2>
<hr />
<EditForm Model="resetModel" OnValidSubmit="HandleReset">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="resetModel.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
    <InputText @bind-Value="resetModel.Password" class="form-control" type="password" placeholder="Please enter your password." />
    <InputText @bind-Value="resetModel.ConfirmPassword" class="form-control" type="password" placeholder="Please confirm your password." />
    <InputText @bind-Value="resetModel.Code" class="form-control" placeholder="Reset code" />
    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
</EditForm>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

@code {
    private ResetModel resetModel = new ResetModel();
    private string statusMessage;

    private async Task HandleReset()
    {
        statusMessage = string.Empty;
        if (resetModel.Password != resetModel.ConfirmPassword)
        {
            statusMessage = "Passwords do not match.";
            return;
        }
        var user = await UserManager.FindByEmailAsync(resetModel.Email);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }
        var result = await UserManager.ResetPasswordAsync(user, resetModel.Code, resetModel.Password);
        if (result.Succeeded)
        {
            statusMessage = "Password has been reset. You can now log in.";
            NavigationManager.NavigateTo("/account/login");
        }
        else
        {
            statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }
    public class ResetModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [MinLength(6)]
        public string Password { get; set; }
        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
        [Required]
        public string Code { get; set; }
    }
}
